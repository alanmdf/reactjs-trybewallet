{"version":3,"sources":["actions/index.js","pages/Login.js","components/SelectInput.js","components/AddExpense.js","components/TableHeader.js","components/ExpenseBoard.js","components/Header.js","components/EditExpense.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["setExpense","data","expense","type","exchangeRates","getCurrenciesThunk","dispatch","a","fetch","response","json","currencies","Object","keys","filter","currency","Login","state","email","password","handleChange","bind","handleClick","target","name","value","this","setState","userEmail","props","validation","test","length","action","htmlFor","data-testid","onChange","minLength","to","disabled","onClick","React","Component","connect","login","SelectInput","label","inputValue","optionsArray","placeholder","id","map","option","key","paymentOptions","tagOptions","AddExpense","description","method","tag","getCurrencies","expenses","wallet","setExpenseThunk","TableHeader","ExpenseBoard","editExpense","sort","expenseA","expenseB","replace","Number","ask","toFixed","Header","total","EditExpense","finishEditExpense","quitEditForm","finishEditExpenseAction","Wallet","editForm","finishEdit","removeExpense","convertedValue","reduce","acc","curr","user","removeExpenseAction","editExpenseAction","App","exact","path","component","Boolean","window","location","hostname","match","initialState","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f605473.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const LOGIN = 'LOGIN';\nexport const GET_CURRENCIES_SUCCESS = 'GET_CURRENCIES_SUCCESS';\nexport const SET_EXPENSE = 'SET_EXPENSE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const FINISH_EDIT_EXPENSE = 'FINISH_EDIT_EXPENSE';\n\nexport const login = (email) => ({\n  type: LOGIN,\n  email,\n});\n\nexport const getCurrenciesSuccess = (currencies) => ({\n  type: GET_CURRENCIES_SUCCESS,\n  currencies: currencies.filter((currency) => currency !== 'USDT'),\n});\n\nexport const setExpense = (data, expense) => ({\n  type: SET_EXPENSE,\n  expense: {\n    ...expense,\n    exchangeRates: data,\n  },\n});\n\nexport const removeExpenseAction = (expense) => ({\n  type: REMOVE_EXPENSE,\n  expense,\n});\n\nexport const editExpenseAction = (expense) => ({\n  type: EDIT_EXPENSE,\n  expense,\n});\n\nexport const finishEditExpenseAction = (expense) => ({\n  type: FINISH_EDIT_EXPENSE,\n  expense,\n});\n\nexport const getCurrenciesThunk = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  dispatch(getCurrenciesSuccess(Object.keys(data)));\n};\n\nexport const setExpenseThunk = (expense) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  dispatch(setExpense(data, expense));\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { login } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { email } = this.state;\n    const { userEmail } = this.props;\n    userEmail(email);\n  }\n\n  render() {\n    const { email, password } = this.state;\n    let validation = true;\n    const MIN_PASSWORD_LENGTH = 6;\n    // Regex para validação de email adaptada do seguinte link: https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n    const EMAIL_REGEX = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+?$/i;\n    const emailValidation = EMAIL_REGEX.test(email);\n    if (emailValidation && password.length >= MIN_PASSWORD_LENGTH) {\n      validation = false;\n    }\n    return (\n      <form action=\"\">\n        <label htmlFor=\"email-input\">\n          Email:\n          <input\n            type=\"email\"\n            name=\"email\"\n            data-testid=\"email-input\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"password-input\">\n          Password:\n          <input\n            type=\"password\"\n            name=\"password\"\n            data-testid=\"password-input\"\n            minLength=\"6\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <Link to=\"/carteira\">\n          <button\n            type=\"button\"\n            disabled={ validation }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </Link>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  userEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userEmail: (email) => dispatch(login(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectInput extends React.Component {\n  render() {\n    const { label, inputValue, optionsArray, handleChange, placeholder } = this.props;\n    return (\n      <label htmlFor={ inputValue }>\n        { label }\n        <select\n          name={ inputValue }\n          id={ inputValue }\n          onChange={ handleChange }\n          value={ placeholder }\n        >\n          { optionsArray.map((option) => (\n            <option key={ option } value={ option }>{option}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n}\n\nSelectInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  inputValue: PropTypes.string.isRequired,\n  optionsArray: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getCurrenciesThunk, setExpenseThunk } from '../actions';\n\nimport SelectInput from './SelectInput';\n\nconst paymentOptions = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nconst tagOptions = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass AddExpense extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { setExpense, expenses } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    const expense = {\n      id: expenses.length,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    };\n    setExpense(expense);\n  }\n\n  render() {\n    const { currencies = [] } = this.props;\n    return (\n      <form action=\"\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            name=\"value\"\n            id=\"value\"\n            type=\"text\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            name=\"description\"\n            id=\"description\"\n            type=\"text\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <SelectInput\n          label=\"Moeda\"\n          inputValue=\"currency\"\n          optionsArray={ currencies }\n          handleChange={ this.handleChange }\n        />\n        <SelectInput\n          label=\"Método de pagamento\"\n          inputValue=\"method\"\n          optionsArray={ paymentOptions }\n          handleChange={ this.handleChange }\n        />\n        <SelectInput\n          label=\"Tag\"\n          inputValue=\"tag\"\n          optionsArray={ tagOptions }\n          handleChange={ this.handleChange }\n        />\n        <button type=\"button\" onClick={ this.handleClick }>Adicionar despesa</button>\n      </form>\n    );\n  }\n}\n\nAddExpense.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = ({ wallet: { currencies, expenses } }) => ({\n  currencies,\n  expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesThunk()),\n  setExpense: (expense) => dispatch(setExpenseThunk(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExpense);\n","import React from 'react';\n\nclass TableHeader extends React.Component {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableHeader from './TableHeader';\n\nclass ExpenseBoard extends React.Component {\n  render() {\n    const { expenses = [], handleClick, editExpense } = this.props;\n    return (\n      <table>\n        <TableHeader />\n        <tbody>\n          { expenses.sort((expenseA, expenseB) => expenseA.id - expenseB.id)\n            .map((expense) => (\n              <tr key={ expense.id }>\n                <td>{ expense.description }</td>\n                <td>{ expense.tag }</td>\n                <td>{ expense.method }</td>\n                <td>{ expense.value }</td>\n                <td>\n                  { expense.exchangeRates[expense.currency].name.replace(/\\/.{1,}/, '') }\n                </td>\n                <td>\n                  { Number(expense.exchangeRates[expense.currency].ask).toFixed(2) }\n                </td>\n                <td>\n                  { Number(expense.value * expense.exchangeRates[expense.currency].ask)\n                    .toFixed(2) }\n                </td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"edit-btn\"\n                    onClick={ () => editExpense(expense) }\n                  >\n                    Editar\n                  </button>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => handleClick(expense) }\n                  >\n                    Excluir\n                  </button>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpenseBoard.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default ExpenseBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { email, total } = this.props;\n    return (\n      <header>\n        <p data-testid=\"email-field\">{ email }</p>\n        <p data-testid=\"total-field\">\n          { total }\n          {' '}\n          <span data-testid=\"header-currency-field\">BRL</span>\n          {' '}\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getCurrenciesThunk, finishEditExpenseAction } from '../actions';\n\nimport SelectInput from './SelectInput';\n\nconst paymentOptions = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nconst tagOptions = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass EditExpense extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { editExpense, finishEditExpense, quitEditForm } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    const expense = {\n      id: editExpense[0].id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: editExpense[0].exchangeRates,\n    };\n    finishEditExpense(expense);\n    quitEditForm();\n  }\n\n  render() {\n    const { currencies = [], editExpense = [] } = this.props;\n    return (\n      <form action=\"\">\n        <label htmlFor=\"value\">\n          Valor\n          <input\n            name=\"value\"\n            id=\"value\"\n            type=\"text\"\n            placeholder={ editExpense[0].value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Descrição\n          <input\n            name=\"description\"\n            id=\"description\"\n            type=\"text\"\n            placeholder={ editExpense[0].description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <SelectInput\n          label=\"Moeda\"\n          inputValue=\"currency\"\n          optionsArray={ currencies }\n          placeholder={ editExpense[0].currency }\n          handleChange={ this.handleChange }\n        />\n        <SelectInput\n          label=\"Método de pagamento\"\n          inputValue=\"method\"\n          optionsArray={ paymentOptions }\n          placeholder={ editExpense[0].method }\n          handleChange={ this.handleChange }\n        />\n        <SelectInput\n          label=\"Tag\"\n          inputValue=\"tag\"\n          optionsArray={ tagOptions }\n          placeholder={ editExpense[0].tag }\n          handleChange={ this.handleChange }\n        />\n        <button type=\"button\" onClick={ this.handleClick }>Editar despesa</button>\n      </form>\n    );\n  }\n}\n\nEditExpense.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  finishEditExpense: PropTypes.func.isRequired,\n  quitEditForm: PropTypes.func.isRequired,\n  editExpense: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = ({ wallet: { currencies, editExpense } }) => ({\n  currencies,\n  editExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesThunk()),\n  finishEditExpense: (expense) => dispatch(finishEditExpenseAction(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpense);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport AddExpense from '../components/AddExpense';\nimport ExpenseBoard from '../components/ExpenseBoard';\n\nimport { removeExpenseAction, editExpenseAction } from '../actions';\nimport Header from '../components/Header';\nimport EditExpense from '../components/EditExpense';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      editForm: false,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.editExpense = this.editExpense.bind(this);\n    this.finishEdit = this.finishEdit.bind(this);\n  }\n\n  handleClick(expense) {\n    const { removeExpense } = this.props;\n    removeExpense(expense);\n  }\n\n  editExpense(expense) {\n    const { editExpense } = this.props;\n    this.setState({ editForm: true });\n    editExpense(expense);\n  }\n\n  finishEdit() {\n    this.setState({ editForm: false });\n  }\n\n  render() {\n    const { email, expenses } = this.props;\n    const { editForm } = this.state;\n    const convertedValue = expenses.map(\n      (expense) => expense.value * expense.exchangeRates[expense.currency].ask,\n    );\n    let total = 0;\n    if (convertedValue.length === 0) {\n      return (\n        <>\n          <Header email={ email } total={ total } />\n          {editForm ? <EditExpense quitEditForm={ this.finishEdit } /> : <AddExpense />}\n          <ExpenseBoard\n            expenses={ expenses }\n            handleClick={ this.handleClick }\n            editExpense={ this.editExpense }\n          />\n        </>);\n    } total = convertedValue.reduce((acc, curr) => acc + curr).toFixed(2);\n    return (\n      <>\n        <Header email={ email } total={ total } />\n        {editForm ? <EditExpense quitEditForm={ this.finishEdit } /> : <AddExpense />}\n        <ExpenseBoard\n          expenses={ expenses }\n          handleClick={ this.handleClick }\n          editExpense={ this.editExpense }\n        />\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({\n  user: { email },\n  wallet: { expenses },\n}) => ({ email, expenses });\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (expense) => dispatch(removeExpenseAction(expense)),\n  editExpense: (expense) => dispatch(editExpenseAction(expense)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst initialState = {\n  email: '',\n};\n\nconst user = (state = initialState, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return ({\n      ...state,\n      email: action.email,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  GET_CURRENCIES_SUCCESS,\n  REMOVE_EXPENSE,\n  SET_EXPENSE,\n  EDIT_EXPENSE,\n  FINISH_EDIT_EXPENSE } from '../actions';\n\nconst initialState = ({\n  currencies: [],\n  expenses: [],\n  editExpense: [],\n});\n\nconst wallet = (state = initialState, action) => {\n  switch (action.type) {\n  case GET_CURRENCIES_SUCCESS:\n    return ({\n      ...state,\n      currencies: action.currencies,\n    });\n  case SET_EXPENSE:\n    return ({\n      ...state,\n      expenses: [...state.expenses, action.expense],\n    });\n  case REMOVE_EXPENSE:\n    return ({\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.expense.id),\n    });\n  case EDIT_EXPENSE:\n    return ({\n      ...state,\n      editExpense: state.expenses.filter((expense) => expense.id === action.expense.id),\n    });\n  case FINISH_EDIT_EXPENSE:\n    return ({\n      ...state,\n      expenses: [...state.expenses.filter((expense) => expense.id !== action.expense.id),\n        action.expense],\n    });\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\n// import user from './user';\n// import wallet from './wallet';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst reducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}